{
  // GraphRAG Algorithmic Pipeline Configuration
  // Fast pattern-based approach (NO LLM required)
  // VSCode: This file has autocomplete! Type to see suggestions.

  "$schema": "../schema/graphrag-config.schema.json",

  // =========================================================================
  // MODE: Pipeline Approach Selection
  // =========================================================================
  mode: {
    approach: "algorithmic"  // Options: "semantic", "algorithmic", "hybrid"
  },

  // =========================================================================
  // GENERAL: Basic Configuration
  // =========================================================================
  general: {
    input_document_path: "data/input.txt",
    output_dir: "./output/algorithmic",
    log_level: "info",  // trace, debug, info, warn, error
    max_threads: 4,
    enable_profiling: true
  },

  // =========================================================================
  // ALGORITHMIC PIPELINE: Pattern-based Configuration (NO LLM)
  // =========================================================================
  algorithmic: {
    // --- Embeddings: Hash-based with TF-IDF ---
    embeddings: {
      backend: "hash",  // Options: hash, count, tfidf
      hash_size: 1024,  // 128-65536, higher = more precision
      use_tfidf_weighting: true,
      min_ngram: 1,
      max_ngram: 2,  // 1-2 = unigrams + bigrams
      lowercase: true,
      remove_stopwords: true
    },

    // --- Entity Extraction: Pattern-based (Regex + Rules) ---
    entity_extraction: {
      use_gleaning: false,  // ‚ùå Not applicable to algorithmic
      use_patterns: true,   // ‚úÖ Enable pattern matching

      // Pattern-based extraction options
      extract_capitalized: true,  // Extract proper nouns
      extract_acronyms: true,     // NASA, FBI, etc.
      extract_numbers: true,
      extract_emails: false,
      extract_urls: false,

      confidence_threshold: 0.5,  // Lower for pattern-based
      min_entity_length: 2,
      max_entity_length: 50,

      // Custom regex patterns
      entity_patterns: [
        {
          type: "ORGANIZATION",
          pattern: "(?:[A-Z][a-z]+\\s+)*(?:Inc|Corp|Ltd|LLC|Company)"
        },
        {
          type: "LOCATION",
          pattern: "(?:[A-Z][a-z]+\\s+)*(?:City|State|County|Country)"
        },
        {
          type: "DATE",
          pattern: "\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}"
        },
        {
          type: "MONEY",
          pattern: "\\$\\d+(?:,\\d{3})*(?:\\.\\d{2})?"
        }
      ],

      exclude_stopwords: true,
      custom_stopwords: ["the", "and", "but", "for", "with", "from"]
    },

    // --- Retrieval: BM25 Keyword-based ---
    retrieval: {
      strategy: "bm25",  // Options: bm25, tfidf, jaccard
      top_k: 10,

      // BM25 parameters (Okapi BM25)
      bm25_k1: 1.5,     // 0.5-3.0, term frequency saturation
      bm25_b: 0.75,     // 0.0-1.0, length normalization
      bm25_epsilon: 0.25,

      min_keyword_score: 0.1,
      use_query_expansion: false  // No LLM
    },

    // --- Graph: Co-occurrence based ---
    graph: {
      extract_relationships: true,
      relationship_confidence_threshold: 0.4,

      // Co-occurrence based relationships
      use_cooccurrence: true,
      cooccurrence_window: 50,      // Word window
      min_cooccurrence_count: 2,

      use_pagerank: false,          // ‚ùå Use simpler approach
      use_degree_centrality: true,  // ‚úÖ Simple, fast

      min_relation_score: 0.3,
      max_connections_per_node: 15,
      bidirectional_relations: true
    }
  },

  // =========================================================================
  // TEXT PROCESSING: Chunking and Enrichment
  // =========================================================================
  text_processing: {
    enabled: true,
    chunk_size: 512,
    chunk_overlap: 64,  // Smaller overlap for speed
    min_chunk_size: 100,
    max_chunk_size: 1024,
    normalize_whitespace: true,
    remove_artifacts: true,

    enrichment: {
      enabled: true,
      auto_detect_format: true,
      parser_type: "auto",

      // TF-IDF keyword extraction (NO LLM)
      extract_keywords: true,
      max_keywords_per_chunk: 5,
      use_tfidf: true,

      // Extractive summarization (NO LLM)
      generate_summaries: true,
      min_chunk_length_for_summary: 150,
      max_summary_length: 100,  // Shorter for speed

      extract_chapter: true,
      extract_section: true,
      extract_position: true,
      calculate_confidence: true
    }
  },

  // =========================================================================
  // OLLAMA: LLM Service (DISABLED for algorithmic)
  // =========================================================================
  ollama: {
    enabled: false,  // ‚ùå NOT required for algorithmic pipeline
    host: "http://localhost",
    port: 11434,
    timeout_seconds: 30,
    max_retries: 1,
    fallback_to_hash: true
  },

  // =========================================================================
  // QUERY PROCESSING: Pattern-based (NO LLM)
  // =========================================================================
  query_processing: {
    enabled: true,
    use_advanced_pipeline: false,  // ‚ùå No LLM
    use_intent_classification: true,
    use_concept_extraction: false,  // ‚ùå No LLM
    confidence_threshold: 0.4,

    intent_classification: {
      entity_patterns: ["who is", "what is", "person", "organization"],
      concept_patterns: ["concept", "idea", "definition"],
      relationship_patterns: ["relationship", "connection", "related to"],
      search_patterns: ["find", "search", "locate"]
    },

    prompt_templates: {
      entity: "Query: {query}\n\nRelevant information:\n{context}",
      concept: "Query: {query}\n\nRelevant information:\n{context}",
      relationship: "Query: {query}\n\nRelevant relationships:\n{context}"
    }
  },

  // =========================================================================
  // PERFORMANCE: Optimized for Speed
  // =========================================================================
  performance: {
    batch_processing: true,
    batch_size: 64,  // Larger batches for CPU efficiency
    worker_threads: 4,
    memory_limit_mb: 2048,  // Lower memory footprint
    cache_embeddings: true
  },

  // =========================================================================
  // MONITORING: Basic Metrics
  // =========================================================================
  monitoring: {
    enabled: true,
    track_entity_consistency: true,
    track_relationship_accuracy: false,  // Simpler monitoring
    log_insights: false
  }
}

/*
 * ============================================================================
 * ALGORITHMIC PIPELINE SUMMARY
 * ============================================================================
 *
 * ‚úÖ STRENGTHS:
 * - Fast processing speed (10-50x faster than semantic)
 * - Low resource requirements (CPU-only, 1-2GB RAM)
 * - Deterministic and reproducible results
 * - No external API dependencies
 * - Works offline and on edge devices
 *
 * üéØ BEST USE CASES:
 * - Large-scale document processing (millions of docs)
 * - Resource-constrained environments
 * - Real-time/low-latency applications
 * - Privacy-sensitive applications (no API calls)
 * - Structured data with clear patterns
 *
 * ‚ö° PERFORMANCE:
 * - Speed: 1000-5000 documents/second
 * - Memory: 1-2GB
 * - Accuracy: 70-85% (vs 90-95% for semantic)
 *
 * üí° OPTIMIZATION TIPS:
 * - Tune hash_size based on vocabulary (1024-4096)
 * - Adjust bm25_k1 for your document length
 * - Add custom patterns to entity_patterns
 * - Use larger batch_size for CPU-bound workloads
 *
 * üöÄ QUICK START:
 * 1. No installation required (pure Rust)
 * 2. Customize entity_patterns for your domain
 * 3. Run: cargo run --example your_example -- algorithmic.graphrag.json5
 * ============================================================================
 */
