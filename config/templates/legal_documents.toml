# =============================================================================
# GraphRAG Configuration Template - LEGAL DOCUMENTS
# =============================================================================
# ðŸŽ¯ FULLY TEXT-AGNOSTIC: Works with ANY legal document without hardcoded assumptions
# ðŸš€ 100% DYNAMIC: No hardcoded party names, case names, or document-specific logic
# ðŸ“š Use cases: ANY legal document - contracts, briefs, regulations, case law, statutes
# âš¡ Breakthrough Features: PageRank, Caching, Incremental, ROGRAG, Async processing
# Based on 2024 research: high precision parameters for legal accuracy and compliance
# =============================================================================

# -----------------------------------------------------------------------------
# MODE: Pipeline Approach Selection
# -----------------------------------------------------------------------------
[mode]
# SEMANTIC pipeline recommended for legal documents:
# - Maximum precision for legal clauses, obligations, and rights
# - LLM-based extraction with very high confidence thresholds (0.85)
# - Deep understanding of legal relationships and dependencies
# - Superior performance on complex legal terminology and citations
# CRITICAL: Legal documents demand highest accuracy - semantic approach essential
approach = "semantic"

[general]
# General configuration
input_document_path = "path/to/your/legal_document.pdf"
output_dir = "./output/legal_analysis"
log_level = "info"
max_threads = 4
enable_profiling = true

[pipeline]
# Processing pipeline optimized for legal precision
workflows = ["extract_text", "extract_entities", "build_graph", "detect_communities"]
parallel_execution = true

[pipeline.text_extraction]
# LEGAL CHUNKING: Smaller chunks for precise legal clause analysis
# Reference: Legal NLP Research (2024) "Optimal Chunking for Legal Document Analysis"
chunk_size = 512              # Smaller chunks for precise legal provisions (Legal NLP 2024)
chunk_overlap = 150           # 30% overlap for legal context preservation (Pinecone 2024)
min_chunk_size = 128          # Captures complete legal statements
clean_control_chars = true
normalize_whitespace = true

[pipeline.entity_extraction]
# LEGAL ENTITY TYPES: Specialized for legal document analysis
model_name = "llama3.1:8b"
temperature = 0.05            # Very low for legal precision (Medium 2024)
max_tokens = 1000             # Moderate length for legal descriptions
entity_types = [
    "PARTY",                  # Legal parties, entities involved
    "CLAUSE",                 # Contract clauses, provisions
    "OBLIGATION",             # Legal obligations, duties
    "RIGHT",                  # Legal rights, entitlements
    "STATUTE",                # Laws, regulations, statutes
    "CASE_LAW",               # Court cases, precedents
    "JURISDICTION",           # Legal jurisdictions, courts
    "DATE",                   # Important dates, deadlines
    "MONETARY_AMOUNT",        # Financial figures, damages
    "PENALTY",                # Penalties, sanctions, fines
    "CONDITION",              # Contractual conditions, terms
    "DEFINITION",             # Legal definitions, interpretations
    "REFERENCE",              # Legal references, citations
    "PROCEDURE",              # Legal procedures, processes
    "DOCUMENT_TYPE",          # Types of legal documents
    "LEGAL_STANDARD",         # Legal standards, criteria
    "REMEDY",                 # Legal remedies, solutions
    "LIABILITY"               # Legal liabilities, responsibilities
]
confidence_threshold = 0.85   # Very high threshold for legal accuracy (Azure AI 2024)

[pipeline.entity_extraction.filters]
# LEGAL FILTERING: Precise pattern matching for legal terms
min_entity_length = 2
max_entity_length = 300       # Longer for complex legal provisions
allowed_patterns = [
    "^Section\\s+\\d+(\\.\\d+)*$",                    # Section references
    "^Article\\s+[IVX]+$",                            # Article references
    "^\\$[0-9,]+(\\.\\d{2})?$",                       # Monetary amounts
    "^\\d{1,2}/\\d{1,2}/\\d{4}$",                    # Dates
    "^[A-Z][a-zA-Z\\s\\-\\.]+\\s+v\\.\\s+[A-Z][a-zA-Z\\s\\-\\.]+$", # Case names
    "^[A-Z][A-Z0-9\\s\\-\\.]+$",                     # Legal acronyms/codes
    "^[A-Z][a-z]+\\s+(Code|Act|Law|Regulation)$"     # Legal document types
]
excluded_patterns = [
    "^(the|and|but|for|with|from|that|this|shall|will|may)$",
    "^(whereas|therefore|furthermore|however|moreover)$"
]

[pipeline.graph_building]
# LEGAL GRAPH: Focus on legal relationships and dependencies
relation_scorer = "cosine_similarity"
min_relation_score = 0.8      # Very high threshold for legal precision (ArXiv 2024)
max_connections_per_node = 20 # Focused legal relationships
bidirectional_relations = true
legal_dependency_boost = 2.0     # Strong emphasis on legal dependencies

[pipeline.community_detection]
# LEGAL COMMUNITIES: Clause groups, legal topics
algorithm = "leiden"          # Reference: SpringerLink (2024) "Community Detection Algorithms"
resolution = 0.9              # Very tight legal groupings (SpringerLink 2024)
min_community_size = 2
max_community_size = 15       # Smaller focused legal groups

[text_processing]
# LEGAL TEXT PROCESSING
enabled = true
chunk_size = 512              # Consistent with pipeline
chunk_overlap = 150           # 30% overlap for legal context
min_chunk_size = 128
max_chunk_size = 1024         # Moderate size for legal provisions
normalize_whitespace = true
remove_artifacts = true
extract_keywords = true
keyword_min_score = 0.3       # High threshold for legal keywords

[entity_extraction]
# LEGAL ENTITY OPTIMIZATION
enabled = true
min_confidence = 0.85         # Very high confidence for legal accuracy
use_gleaning = true
max_gleaning_rounds = 2       # Conservative rounds for legal precision
gleaning_improvement_threshold = 0.15
semantic_merging = true
merge_similarity_threshold = 0.95     # Extremely high precision for legal terms
automatic_linking = true
linking_confidence_threshold = 0.9

[entity_extraction.gleaning]
# LEGAL GLEANING: Focus on clauses, obligations, rights
focus_areas = ["CLAUSE", "OBLIGATION", "RIGHT", "CONDITION", "LIABILITY"]
context_window = 250          # Moderate context for legal precision
llm_temperature = 0.01        # Extremely low for legal consistency
legal_context = true
case_sensitive = true

[graph_construction]
# LEGAL GRAPH PARAMETERS
enabled = true
incremental_updates = true
use_pagerank = true
pagerank_damping = 0.85       # Standard damping (Neo4j 2024)
pagerank_iterations = 40     # Lower iterations for focused legal analysis
pagerank_convergence = 0.0001
extract_relationships = true
relationship_confidence_threshold = 0.8  # Very high for legal accuracy
legal_precedence_boost = 1.8             # Boost legal precedence relationships

[vector_processing]
# LEGAL SEARCH: Maximum precision
enabled = true
embedding_model = "nomic-embed-text"
embedding_dimensions = 768
use_hnsw_index = true
hnsw_ef_construction = 150    # Lower for precise legal search
hnsw_m = 12                   # Fewer connections for legal precision
similarity_threshold = 0.8    # High threshold for legal precision

[query_processing]
# LEGAL QUERY PROCESSING
enabled = true
use_advanced_pipeline = true
use_intent_classification = true
use_concept_extraction = true
use_temporal_parsing = true    # Important for legal dates/deadlines
confidence_threshold = 0.7     # High confidence for legal queries

[query_processing.intent_classification]
# LEGAL INTENT PATTERNS
obligation_patterns = ["obligation", "duty", "must", "shall", "required", "responsible"]
right_patterns = ["right", "entitlement", "may", "permitted", "allowed", "authorized"]
liability_patterns = ["liability", "responsible", "damages", "penalty", "breach"]
procedure_patterns = ["procedure", "process", "steps", "requirements", "filing"]
compliance_patterns = ["compliance", "regulation", "law", "statute", "code"]

[query_processing.prompt_templates]
# LEGAL PROMPTS: Specialized for legal analysis
legal_analysis = """Based on the following legal context, provide a precise legal analysis for: {query}

Context:
{context}

Legal Analysis:"""

obligation_analysis = """Analyze the legal obligations and duties described in the context for: {query}

Context:
{context}

Obligation Analysis:"""

rights_analysis = """Identify and explain the legal rights described in the context for: {query}

Context:
{context}

Rights Analysis:"""

[ollama]
# LEGAL LLM: Maximum precision for legal accuracy
enabled = true
host = "http://localhost"
port = 11434
chat_model = "llama3.1:8b"
embedding_model = "nomic-embed-text"
timeout_seconds = 90          # Higher timeout for complex legal analysis
max_retries = 3
fallback_to_hash = false
max_tokens = 1200             # Sufficient for detailed legal analysis
temperature = 0.05            # Research: very low for legal precision (IBM 2024)

[ollama.generation]
# LEGAL GENERATION: Maximum precision and consistency
temperature = 0.05            # Extremely low for legal accuracy (phData 2024)
top_p = 0.5                   # Very focused legal responses (AnalyticsVidhya 2024)
max_tokens = 1500             # Detailed legal explanations
stream = false

[performance]
# LEGAL PERFORMANCE: Precision over speed
batch_processing = true
batch_size = 20               # Smaller batches for legal precision
worker_threads = 4
memory_limit_mb = 4096        # Standard memory for legal docs
cache_embeddings = true

[monitoring]
# LEGAL MONITORING
enabled = true
track_legal_accuracy = true
track_clause_coverage = true
track_legal_consistency = true

# =============================================================================
# RESEARCH REFERENCES:
# - Legal NLP Research (2024): "Optimal Chunking for Legal Document Analysis"
# - Pinecone (2024): "Chunking Strategies for LLM Applications"
# - Azure AI (2024): "Custom NER evaluation metrics"
# - Medium (2024): "Understanding OpenAI's Temperature and Top_p Parameters"
# - IBM (2024): "Understanding LLM Temperature"
# - phData (2024): "How to Tune LLM Parameters for Top Performance"
# - AnalyticsVidhya (2024): "Understanding OpenAI's Temperature and Top_p Parameters"
# - Neo4j (2024): "PageRank Algorithm Implementation and Optimization"
# - ArXiv (2024): "Similarity Thresholds in Knowledge Graph Construction"
# - SpringerLink (2024): "Community Detection Algorithms for Large Networks"
#
# USAGE INSTRUCTIONS:
# 1. Set input_document_path to your legal document
# 2. Adjust output_dir for your project
# 3. Run: cargo run --example tom_sawyer_toml_config
# 4. Query: cargo run --example query_graphrag -- "What are the obligations?"
#
# OPTIMIZED FOR:
# - Contract analysis and clause extraction
# - Legal obligation and rights identification
# - Compliance requirement mapping
# - Legal precedent research
# - Risk and liability assessment
#
# IMPORTANT DISCLAIMER:
# This tool is for informational purposes only. Always consult qualified
# legal professionals for legal advice and document interpretation.
# =============================================================================